{
  "$schema": "http://json-schema.org/schema",
  "id": "NxOssLibrary",
  "title": "Create a Node Library for Nx",
  "type": "object",
  "examples": [
    {
      "command": "g lib mylib --directory=myapp",
      "description": "Generate libs/myapp/mylib"
    }
  ],
  "properties": {
    "name": {
      "type": "string",
      "description": "Library name",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the library?"
    },
    "directory": {
      "type": "string",
      "description": "A directory where the lib is placed",
      "alias": "d"
    },
    "builder": {
      "type": "string",
      "enum": [
        "tsdx",
        "tsc"
      ],
      "description": "构建使用的工具",
      "default": "tsdx"
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": [
        "eslint",
        "tslint"
      ],
      "default": "eslint"
    },
    "unitTestRunner": {
      "type": "string",
      "enum": [
        "jest",
        "none"
      ],
      "description": "Test runner to use for unit tests",
      "default": "jest"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the library (used for linting)",
      "alias": "t"
    },
    "importPath": {
      "type": "string",
      "description": "The library name used to import it, like @myorg/my-awesome-lib. Must be a valid npm name."
    },
    "testEnvironment": {
      "type": "string",
      "enum": [
        "jsdom",
        "node"
      ],
      "description": "The test environment to use if unitTestRunner is set to jest",
      "default": "jsdom"
    },
    "babelJest": {
      "type": "boolean",
      "description": "Use babel instead ts-jest",
      "default": false
    },
    "pascalCaseFiles": {
      "type": "boolean",
      "description": "Use pascal case file names.",
      "alias": "P",
      "default": false
    },
    "strict": {
      "type": "boolean",
      "description": "Whether to enable tsconfig strict mode or not.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into <projectRoot>/project.json rather than including it inside workspace.json",
      "type": "boolean",
      "default": false
    }
  },
  "required": [
    "name"
  ]
}
