{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/command-line.schema.json",
  "commands": [
    {
      "name": "prettier",
      "commandKind": "global",
      "summary": "Used by the pre-commit Git hook. This command invokes Prettier to reformat staged changes.",
      "safeForSimultaneousRushProcesses": true,
      "autoinstallerName": "rush-prettier",
      // This will invoke common/autoinstallers/rush-prettier/node_modules/.bin/pretty-quick
      "shellCommand": "pretty-quick --staged"
    },
    {
      "name": "drypub",
      "commandKind": "global",
      "summary": "尝试发布",
      "safeForSimultaneousRushProcesses": true,
      // This will invoke common/autoinstallers/rush-prettier/node_modules/.bin/pretty-quick
      "shellCommand": "rush publish --include-all --set-access-level public -p --pack --release-folder ./common/temp/dry-publish-cache"
    },
    {
      "name": "pub",
      "commandKind": "global",
      "summary": "发布",
      "safeForSimultaneousRushProcesses": true,
      // This will invoke common/autoinstallers/rush-prettier/node_modules/.bin/pretty-quick
      "shellCommand": "rush publish -a --include-all --set-access-level public -p"
    },
    {
      /**
       * (Required) Determines the type of custom command.
       * Rush's "bulk" commands are invoked separately for each project.  Rush will look in
       * each project's package.json file for a "scripts" entry whose name matches the
       * command name.  By default, the command will run for every project in the repo,
       * according to the dependency graph (similar to how "rush build" works).
       * The set of projects can be restricted e.g. using the "--to" or "--from" parameters.
       */
      "commandKind": "bulk",
      "name": "build:dev",
      "summary": "Dev build (no clean)",
      "description": "Requests translated strings from the translation service and imports them into each project.",
      "enableParallelism": true,
      "watchForChanges": true,
      "ignoreMissingScript": true,
      "incremental": true,
      "allowWarningsInSuccessfulBuild": true,
      "safeForSimultaneousRushProcesses": true
    },
    {
      /**
       * (Required) Determines the type of custom command.
       * Rush's "bulk" commands are invoked separately for each project.  Rush will look in
       * each project's package.json file for a "scripts" entry whose name matches the
       * command name.  By default, the command will run for every project in the repo,
       * according to the dependency graph (similar to how "rush build" works).
       * The set of projects can be restricted e.g. using the "--to" or "--from" parameters.
       */
      "commandKind": "bulk",
      "name": "docs",
      "summary": "docs",
      "description": "docs",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "incremental": true,
      "safeForSimultaneousRushProcesses": true,
      "allowWarningsInSuccessfulBuild": true
    },
    {
      "commandKind": "bulk",
      "name": "build",
      "ignoreMissingScript": true,
      "summary": "build",
      "incremental": true,
      "enableParallelism": true,
      "allowWarningsInSuccessfulBuild": true,
      "description": "build"
    },
    {
      "commandKind": "phased",
      "name": "build2",
      "summary": "build2",
      "phases": [
        "_phase:build",
        "_phase:build-dts"
      ],
      "incremental": true,
      "enableParallelism": true,
      "description": "build"
    },
    {
      /**
       * (Required) Determines the type of custom command.
       * Rush's "bulk" commands are invoked separately for each project.  Rush will look in
       * each project's package.json file for a "scripts" entry whose name matches the
       * command name.  By default, the command will run for every project in the repo,
       * according to the dependency graph (similar to how "rush build" works).
       * The set of projects can be restricted e.g. using the "--to" or "--from" parameters.
       */
      "commandKind": "bulk",
      "name": "nx:format",
      "summary": "Imports translated strings into each project.",
      "description": "Requests translated strings from the translation service and imports them into each project.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    {
      /**
       * (Required) Determines the type of custom command.
       * Rush's "global" commands are invoked once for the entire repo.
       */
      "commandKind": "global",
      "name": "deploy-app",
      "summary": "Deploys the application",
      "description": "Run this command to deploy the application",
      "shellCommand": "node common/scripts/deploy-app.js"
    }
  ],
  "parameters": [
    {
      /**
       * (Required) Determines the type of custom parameter.
       * "A "choice" is a custom command-line parameter whose argument must be chosen from a list
       * of allowable alternatives.
       */
      "parameterKind": "choice",
      "longName": "--version-policy",
      "description": "版本名称",
      "shortName": "-p",
      "associatedCommands": [
        "drypub",
        "pub"
      ],
      "alternatives": [
        {
          "name": "shared",
          "description": "各领域共享工具包"
        },
        {
          "name": "rig",
          "description": "各领域共享配置包"
        },
        {
          "name": "vue2-shared",
          "description": "vue2共享包"
        }
      ]
    }
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.
    //    */
    //   "parameterKind": "flag",
    //   "longName": "--ship",
    //   "shortName": "-s",
    //   "description": "Perform a production build, including minification and localization steps",
    //   "associatedCommands": [ "build", "rebuild", "import-strings" ],
    // },
    // {
    //   "parameterKind": "flag",
    //   "longName": "--minimal",
    //   "shortName": "-m",
    //   "description": "Perform a fast build, which disables certain tasks such as unit tests and linting",
    //   "associatedCommands": [ "build", "rebuild" ]
    // },
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * "A "choice" is a custom command-line parameter whose argument must be chosen from a list
    //    * of allowable alternatives.
    //    */
    //   "parameterKind": "choice",
    //   "longName": "--locale",
    //   "description": "Selects a single instead of the default locale (en-us) for non-ship builds or all locales for ship builds.",
    //   "associatedCommands": [ "build", "rebuild", "import-strings" ],
    //   "alternatives": [
    //     {
    //       "name": "en-us",
    //       "description": "US English"
    //     },
    //     {
    //       "name": "fr-fr",
    //       "description": "French (France)"
    //     },
    //     {
    //       "name": "es-es",
    //       "description": "Spanish (Spain)"
    //     },
    //     {
    //       "name": "zh-cn",
    //       "description": "Chinese (China)"
    //     }
    //   ]
    // }
  ],
  "phases": [
    {
      "name": "_phase:build",
      "dependencies": {
        "upstream": [
          "_phase:build"
        ]
      },
      "ignoreMissingScript": true,
      "allowWarningsOnSuccess": false
    },
    {
      "name": "_phase:build-dts",
      "dependencies": {
        "upstream": [
          "_phase:build-dts"
        ],
        "self": [
          "_phase:build"
        ]
      },
      "ignoreMissingScript": true,
      "allowWarningsOnSuccess": false
    }
  ]
}
