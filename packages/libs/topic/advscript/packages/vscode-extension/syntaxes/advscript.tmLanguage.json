{
  "name": "AdvScript",
  "scopeName": "text.source.advscript",
  "fileTypes": [
    "adv",
    "avs"
  ],
  "patterns": [
    {
      "include": "#Script"
    }
  ],
  "repository": {
    "Script": {
      "patterns": [
        {
          "include": "#CONTENT"
        }
      ]
    },
    "EXPRESSION": {
      "patterns": [
        {
          "include": "#CALL_EXPRESSION"
        },
        {
          "comment": true,
          "name": "constant.language.boolean.true.ts",
          "match": "\\b(true)\\b"
        },
        {
          "comment": false,
          "name": "constant.language.boolean.false.ts",
          "match": "\\b(false)\\b"
        },
        {
          "comment": "NUMBER",
          "match": "\\b([0-9]+)\\b",
          "name": "constant.numeric.adv"
        },
        {
          "comment": "VARIABLE_SP",
          "match": "((\\$|#)([_$[:alpha:]][_$[:alnum:]]*))((?=[= <>+-\\\\*/^%])|\\b|$)",
          "name": "entity.name.function.macro.adv"
        },
        {
          "comment": "VARIABLE",
          "match": "(([_$[:alpha:]][_$[:alnum:]]*))((?=[= <>+-\\\\*/^%])|\\b|$)",
          "name": "variable.parameter.adv"
        },
        {
          "match": "(\\.\\.\\.)",
          "name": "support.type.adv"
        },
        {
          "match": "( (in) )",
          "name": "keyword.control.adv"
        },
        {
          "comment": "OPERATOR",
          "match": "(\\+|\\-|\\*|\\/|=|==|>|<|>=|<=)",
          "name": "keyword.operator.adv"
        },
        {
          "include": "source.ts#expression"
        }
      ]
    },
    "CALL_EXPRESSION": {
      "name": "meta.brace.round.ts",
      "begin": "(([_$[:alpha:]][_$[:alnum:]]*))\\(",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.macro.adv"
        }
      },
      "end": "\\)",
      "patterns": [
        {
          "include": "#EXPRESSION"
        }
      ]
    },
    "MACRO_CALL_PARAM": {
      "patterns": [
        {
          "match": "( ([_$[:alpha:]][_$[:alnum:]]*))(=((?!( |(\\n|\\]|\\|))).+?)|)(?=( |(\\n|\\]|\\|)))",
          "captures": {
            "1": {
              "name": "entity.name.tag.adv"
            },
            "3": {
              "patterns": [
                {
                  "include": "#EXPRESSION"
                }
              ]
            }
          }
        }
      ]
    },
    "MACRO_CALL_EXPRESSION": {
      "name": "meta.brace.round.ts",
      "begin": "((\\[|\\|)[ \\t]*(([_$[:alpha:]][_$[:alnum:]]*)\\b|))",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.macro.adv"
        }
      },
      "end": "(\\]|\\n)",
      "endCaptures": {
        "1": {
          "name": "entity.name.function.macro.adv"
        }
      },
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#EXPRESSION"
            }
          ]
        },
        {
          "include": "#CALL_EXPRESSION"
        },
        {
          "include": "#MACRO_CALL_EXPRESSION"
        },
        {
          "include": "#MACRO_CALL_PARAM"
        }
      ]
    },
    "MACRO_CALL": {
      "patterns": [
        {
          "include": "#MACRO_CALL_EXPRESSION"
        }
      ]
    },
    "TAG_COMMAND": {
      "begin": "^ *?(\\[)(\\b([_$[:alpha:]][_$[:alnum:]]*))\\b",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.macro.adv"
        },
        "2": {
          "name": "entity.name.function.macro.adv"
        }
      },
      "end": "(\\]|\\n)|(?=\\[)",
      "endCaptures": {
        "1": {
          "name": "entity.name.function.macro.adv"
        }
      },
      "patterns": [
        {
          "match": "( ([_$[:alpha:]][_$[:alnum:]]*))(?=( |=))",
          "captures": {
            "2": {
              "name": "entity.name.tag.adv"
            }
          }
        },
        {
          "include": "#EXPRESSION"
        }
      ]
    },
    "Fountain": {
      "patterns": [
        {
          "include": "text.source.fountain.script#title_page"
        },
        {
          "include": "text.source.fountain.script#scene_headings"
        },
        {
          "include": "text.source.fountain.script#section"
        },
        {
          "include": "text.source.fountain.script#synopses"
        },
        {
          "include": "text.source.fountain.script#transitions"
        },
        {
          "include": "text.source.fountain.script#center"
        },
        {
          "include": "text.source.fountain.script#dialogue"
        },
        {
          "include": "text.source.fountain.script#markup"
        },
        {
          "include": "text.source.fountain.script#notes"
        },
        {
          "include": "text.source.fountain.script#pagebreaks"
        },
        {
          "include": "text.source.fountain.script#action"
        },
        {
          "include": "text.source.fountain.script#lyrics"
        }
      ]
    },
    "CONTENT": {
      "patterns": [
        {
          "comment": "COMMENT_LINE",
          "begin": "//",
          "end": "(\\n)",
          "name": "comment.line.double-slash"
        },
        {
          "comment": "COMMENT_BLOCK",
          "begin": "(\\/\\*)",
          "end": "(\\*\\/)",
          "name": "comment.block.adv"
        },
        {
          "include": "#TAG_COMMAND"
        },
        {
          "comment": "LOGICAL",
          "begin": "^ *?(\\|)(let|while|if|elseif|else|foreach|end)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.adv"
            },
            "2": {
              "name": "keyword.control.adv"
            }
          },
          "end": "($)",
          "patterns": [
            {
              "include": "#EXPRESSION"
            }
          ]
        },
        {
          "comment": "TEXT",
          "begin": "((?!(\\|?!(let|while|if|elseif|else|foreach|end).|\\[/))^)",
          "end": "(\\n(?=(?!(\\|?!(let|while|if|elseif|else|foreach|end).|\\[|\\/).)))",
          "name": "markup.advtext",
          "patterns": [
            {
              "include": "#Fountain"
            }
          ]
        }
      ]
    }
  }
}
