# [PackageDev] target_format: plist, ext: tmLanguage
---
name: AdvScript
scopeName: source.advscript
fileTypes: [adv, avs]
uuid: 8544eaea-0884-436b-8ecc-4a683eef1d2c
injections:
  "L:meta.script.advscript (meta.lang.ts | meta.lang.typescript) - (meta source)":
    "patterns":
      "begin": "(?<=>)(?!</)"
      "end": "(?=</)"
      "name": "meta.embedded.block.typescript"
      "contentName": "source.ts"
      "patterns":
        - "include": "source.ts"
patterns:
  - include: "#CONTENT"
repository:
  EXPRESSION:
    patterns:
      - include: "#ARRAY"
      - include: "#OBJECT"
      - include: "#ITEM"
  ARRAY:
    begin: "\\["
    end: "\\]"
    beginCaptures:
      "0": punctuation.section.embedded.begin.adv
    endCaptures:
      "0": punctuation.section.embedded.end.adv
    contentName: "meta.embedded.expression.adv source.ts"
    patterns:
      - begin: "(?=\\[)"
        end: "(?<=\\])"
        patterns:
          - include: "#ITEM" #source.ts#array-binding-pattern
      - include: "#EXPRESSION" #source.ts
  OBJECT:
    begin: "\\{"
    end: "\\}"
    beginCaptures:
      "0": punctuation.section.embedded.begin.adv
    endCaptures:
      "0": punctuation.section.embedded.end.adv
    contentName: "meta.embedded.expression.adv source.ts"
    patterns:
      - begin: "\\G\\s*(?={)"
        end: "(?<=})"
        patterns:
          - include: source.ts#object-binding-pattern
      - include: source.ts
  INLINE_EXPRESSION:
    begin: "(|^)(@{)"
    beginCaptures:
      "2":
        name: entity.name.tag.adv
    end: "(})(|\n)"
    endCaptures:
      "1":
        name: entity.name.tag.adv
    patterns:
      - include: "#EXPRESSION"
  ITEM:
    patterns:
      - comment: NUMBER
        match: "\\b([0-9]+)\\b"
        name: constant.numeric.adv
      - comment: BOOLEAN
        match: "((true)|(false))"
        name: constant.language.adv
      - comment: STRING_QUOTED_DOUBLE
        begin: "\\B(\")"
        beginCaptures:
          "1":
            name: string.quoted.double.adv
        end: "(\")\\B"
        endCaptures:
          "1":
            name: string.quoted.double.adv
        patterns:
          - match: (.)
            name: string.quoted.double.adv
      - comment: STRING_QUOTED_SINGLE
        begin: "\\B(')"
        beginCaptures:
          "1":
            name: string.quoted.single.adv
        end: "(')\\B"
        endCaptures:
          "1":
            name: string.quoted.single.adv
        patterns:
          - match: (.)
            name: string.quoted.single.adv
      - comment: VARIABLE_SP
        match: ((\$|#)(?![0-9])[a-zA-Z0-9_]+)((?=[= <>+-\\*/^%])|\\b|$)
        name: variable.parameter.adv

      - comment: VARIABLE
        match: (((?![0-9])[a-zA-Z0-9_]+))((?=[= <>+-\\*/^%])|\\b|$)
        name: variable.parameter.adv
      - match: "(\\.\\.\\.)"
        name: support.type.adv
      - match: "( (in) )"
        name: keyword.control.adv
      - comment: OPERATOR
        match: "(\\+|\\-|\\*|\\/|=|==|>|<|>=|<=)"
        name: keyword.operator.adv
  CONTENT:
    patterns:
      - comment: COMMENT_LINE
        match: "\\/\\/.*"
        name: comment.line.double-slash.adv
      - comment: COMMENT_BLOCK
        begin: (/\\*)
        end: (\\*/)
        name: comment.block.adv
      - comment: TAG_COMMAND
        begin: "^ *?(\\[|@)(\\b((?![0-9])[a-zA-Z0-9_]+))\\b"
        beginCaptures:
          "1":
            name: entity.name.function.macro.adv
          "2":
            name: entity.name.function.macro.adv
        end: "(\\]|\n)|(?=\\[)"
        endCaptures:
          "1":
            name: entity.name.function.macro.adv
        patterns:
          - match: "( ((?![0-9])[a-zA-Z0-9_]+))(?=( |=))"
            captures:
              "2":
                name: entity.name.tag.adv
          - include: "#EXPRESSION"
      - comment: LOGICAL
        begin: "^ *?(#)\\s*((let|while|if|elseif|else|foreach|end)\\b)*"
        beginCaptures:
          "1":
            name: keyword.control.adv
          "3":
            name: keyword.control.adv
        end: ($)
        patterns:
          - include: "#EXPRESSION"
      - include: "#INLINE_EXPRESSION"
      - comment: TEXT
        match: "(.+?)"
        name: markup.raw.adv
