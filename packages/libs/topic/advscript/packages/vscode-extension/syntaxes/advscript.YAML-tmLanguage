# [PackageDev] target_format: plist, ext: tmLanguage
---
name: AdvScript
scopeName: text.source.advscript
fileTypes: 
  - adv
  - avs

variables:
  propertyAccess: (?:(\.)|(\?\.(?!\s*[[:digit:]])))
  propertyAccessPreIdentifier: \??\.\s*
  identifier: ([_$[:alpha:]][_$[:alnum:]]*)
  constantIdentifier: '[[:upper:]][_$[:digit:][:upper:]]*'
  label: ({{identifier}})\s*(:)
  macroStart: (\[|\|)[ \t]*
  macroEnd: (\n|\]|\|)(?=(?!\())
  parenRight: \)
  macroCallEnd: ((\])(?=(?! {{parenRight}} )))

patterns:
  - include: "#Script"
repository:
  Script:
    patterns: 
      - include: "#CONTENT"
  EXPRESSION:
    patterns:
      - include: "#CALL_EXPRESSION"
      - comment: TRUE
        name: constant.language.boolean.true.ts
        match: \b(true)\b
      - comment: FALSE
        name: constant.language.boolean.false.ts
        match: \b(false)\b
      - comment: NUMBER
        match: \b([0-9]+)\b
        name: constant.numeric.adv
      - comment: VARIABLE_SP
        match: ((\$|#|%){{identifier}})((?=[= <>+-\\*/^%])|\b|$)
        name: entity.name.function.macro.adv
      - comment: VARIABLE
        match: ({{identifier}})((?=[= <>+-\\*/^%])|\b|$)
        name: variable.parameter.adv
      - match: (\.\.\.)
        name: support.type.adv
      - match: ( (in) )
        name: keyword.control.adv
      - comment: OPERATOR
        match: (\+|\-|\*|\/|=|==|>|<|>=|<=)
        name: keyword.operator.adv
      - include: source.ts#expression
  
  CALL_EXPRESSION:
    name: meta.brace.round.ts
    begin: ({{identifier}})\(
    beginCaptures:
      "1":
        name: entity.name.function.macro.adv
    end: \)
    patterns:
      - include: "#EXPRESSION"
  MACRO_CALL_PARAM:
    patterns:
      - match: ( {{identifier}})(=((?!( |\||{{macroEnd}})).+?)|)(?=( |\||{{macroEnd}}))
        captures:
          "1":
            name: entity.name.tag.adv
          "3":
            patterns:
              - include: "#EXPRESSION"
  MACRO_USE_EXPRESSION:
    name: meta.brace.round.ts
    begin: (\|\=)
    beginCaptures:
      "1": 
        name: entity.name.function.macro.adv
    end: (\n)
    endCaptures:     
      "1":    
        name: entity.name.function.macro.adv
    patterns:
      - include: "#EXPRESSION"
  MACRO_TEMPLATE_EXPRESSION:
    name: meta.brace.round.ts
    match: ((\[)(.+)(\]\()(.+)(\)))
    captures:
      "2": 
        name: entity.name.function.macro.adv
      "3":    
        name: markup.raw
      "4":    
        name: entity.name.function.macro.adv
      "5": 
        patterns:
          - include: "#MACRO_CALL_PARAM"
          - include: "#MACRO_CALL_EXPRESSION"
      "6":    
        name: entity.name.function.macro.adv
  MACRO_CALL_EXPRESSION:
    name: meta.brace.round.ts
    begin: ({{macroStart}}({{identifier}}\b|))
    beginCaptures:
      "1": 
        name: entity.name.function.macro.adv
    end: ({{macroCallEnd}}|(?=\n))
    endCaptures:     
      "1":    
        name: entity.name.function.macro.adv
    patterns:
      - begin: \(
        end: \)
        patterns:
          - include: "#EXPRESSION"
      - include: "#CALL_EXPRESSION"
      - include: "#MACRO_USE_EXPRESSION"
      - include: "#MACRO_CALL_EXPRESSION"
      - include: "#MACRO_CALL_PARAM"
  MACRO_CALL:
    patterns:
      - include: "#MACRO_TEMPLATE_EXPRESSION"
      - include: "#MACRO_USE_EXPRESSION"
      - include: "#MACRO_CALL_EXPRESSION"
  TAG_COMMAND:
    begin: ^ *?(\[)(\b{{identifier}})\b
    beginCaptures:
      "1":
        name: entity.name.function.macro.adv
      "2":
        name: entity.name.function.macro.adv
    end: (\]|\n)|(?=\[)
    endCaptures:
      "1":
        name: entity.name.function.macro.adv
    patterns:
      - match: ( {{identifier}})(?=( |=|{{macroEnd}}))
        captures:
          "2":
            name: entity.name.tag.adv
      - include: "#MACRO_CALL_EXPRESSION"
      - include: "#EXPRESSION"
  Fountain:
    patterns:
      - include: text.source.fountain.script#title_page
      - include: text.source.fountain.script#scene_headings
      - include: text.source.fountain.script#section
      - include: text.source.fountain.script#synopses
      - include: text.source.fountain.script#transitions
      - include: text.source.fountain.script#center
      - include: text.source.fountain.script#dialogue
      - include: text.source.fountain.script#markup
      - include: text.source.fountain.script#notes
      - include: text.source.fountain.script#pagebreaks
      - include: text.source.fountain.script#action
      - include: text.source.fountain.script#lyrics
  CONTENT:
    patterns:
      - comment: COMMENT_LINE
        begin: //
        end: (\n)
        name: comment.line.double-slash
      - comment: COMMENT_BLOCK
        begin: (\/\*)
        end: (\*\/)
        name: comment.block.adv
      - include: "#TAG_COMMAND"
      - comment: LOGICAL
        begin: ^ *?(\|)(let|while|if|elseif|else|foreach|end)\b
        beginCaptures:
          "1":
            name: keyword.control.adv
          "2":
            name: keyword.control.adv
        end: ($)
        patterns:
          - include: "#EXPRESSION"
      - comment: TEXT
        begin: ((?!(\|?!(let|while|if|elseif|else|foreach|end).|\[/))^)
        end: (\n(?=(?!(\|?!(let|while|if|elseif|else|foreach|end).|\[|\/).)))
        name: markup.advtext
        patterns:
          - include: "#Fountain"
