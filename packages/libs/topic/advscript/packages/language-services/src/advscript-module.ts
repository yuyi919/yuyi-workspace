import {
  AstNode,
  createDefaultSharedModule,
  DefaultJsonSerializer,
  inject,
  LangiumParser,
  LangiumServices,
  Module,
  PartialLangiumServices,
  DefaultSharedModuleContext,
  createDefaultModule,
  LangiumSharedServices,
} from "langium";
import { AstNodeDescriptionProvider, AstNodeLocator } from "./advscript-provider";
import { AdvscriptValidationRegistry, AdvscriptValidator } from "./advscript-validator";
import { AdvScriptAstReflection, reflection } from "./ast-utils";
import { createCustomParser, CustomParser } from "./CustomParser";
import { CustomTokenBuilder } from "./customTokens";
import { AdvscriptGeneratedModule, AdvScriptGeneratedSharedModule } from "./generated/module";
import * as Lsp from "./lsp";
import * as References from "./references";

type WrapperLangiumParser<T> = LangiumParser & Omit<T, "">;

/**
 * Declaration of custom services - add your own service classes here.
 */
export type AdvscriptAddedServices = {
  shared?: {
    AstReflection: AdvScriptAstReflection;
  };
  validation: {
    AdvscriptValidator: AdvscriptValidator;
  };
  parser: {
    TokenBuilder: CustomTokenBuilder;
    LangiumParser: WrapperLangiumParser<CustomParser>;
  };
  references: References.Providers;
  lsp: Lsp.Providers;
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type AdvScriptServices = LangiumServices & AdvscriptAddedServices;

class JsonSerializer extends DefaultJsonSerializer {
  serialize(node: AstNode, space?: string | number): string {
    try {
      return super.serialize(node, space);
    } catch (error) {
      return "<node:" + node.$type + ">";
    }
  }
}
/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const AdvscriptModule: Module<
  AdvScriptServices,
  PartialLangiumServices & AdvscriptAddedServices
> = {
  validation: {
    ValidationRegistry: (injector) => new AdvscriptValidationRegistry(injector),
    AdvscriptValidator: (injector) => new AdvscriptValidator(injector),
  },
  references: {
    Linker: (injector) => new References.Linker(injector),
    ScopeComputation: (injector) => new References.ScopeComputation(injector),
    NameProvider: (injector) => new References.NameProvider(injector),
    ScopeProvider: (injector) => new References.ScopeProvider(injector),
    References: (injector) => new References.References(injector),
  },
  index: {
    AstNodeLocator: () => new AstNodeLocator(),
    AstNodeDescriptionProvider: (injector) => new AstNodeDescriptionProvider(injector),
  },
  serializer: {
    JsonSerializer: (injector) => new JsonSerializer(injector),
  },
  // parser: {
  //     LangiumParser: (service) => new OhmParser(service) as any,
  // },
  parser: {
    TokenBuilder: () => new CustomTokenBuilder(),
    LangiumParser: (services) =>
      createCustomParser(services) as unknown as WrapperLangiumParser<CustomParser>,
  },
  lsp: {
    HoverProvider: (service) => new Lsp.HoverProvider(service),
    CodeActionProvider: (service) => new Lsp.CodeActionProvider(service),
    DocumentSemanticProvider: (service) => new Lsp.DocumentSemanticProvider(service),
    ReferenceFinder: (services) => new Lsp.ReferenceFinder(services),
    RenameHandler: (services) => new Lsp.RenameHandler(services),
    DocumentSymbolProvider: (services) => new Lsp.DocumentSymbolProvider(services),
    completion: {
      CompletionProvider: (services) => new Lsp.CompletionProvider(services),
    },
  },
};
/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function createAdvscriptServices(context?: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  advscript: AdvScriptServices;
} {
  const shared = inject(createDefaultSharedModule(context), {
    ...AdvScriptGeneratedSharedModule,
    AstReflection: () => reflection,
  });
  const advscript = inject(
    createDefaultModule({ shared }),
    AdvscriptGeneratedModule,
    AdvscriptModule
  );
  shared.ServiceRegistry.register(advscript);
  return { shared, advscript };
}
