AVS {
  Scripts
    = LogicBlock*
  LogicBlock
    = Comment
    | IF LogicBlock* (ELSEIF LogicBlock*)* (ELSE LogicBlock*)? END  -- IF
    | WHILE LogicBlock* END  -- WHILE
    | FOREACH LogicBlock* END  -- FOREACH
    | LET                      -- LET
    | StoryLine                       -- Story
  Comment = "[[" comment_note "]]"       -- notes
          | "//" comment_single     -- single
          | "/*" comment_multi "*/"       -- multi
  comment_single = (~("\n" | "\r") any)+
  comment_note = (~("\n" | "\r" | "]]") any)+
  comment_multi = (~("*/") any)+
  StoryLine
    = ("~")? #raw? Template #raw? PipeExpression?  -- templateText
      | CallCommand -- command
      | Fountain
      | #raw PipeExpression? -- plainText
  raw = plainLetter+

  plainLetter 
    = chinese -- full
    | ~("[" | "{{" | "|" | "\n" | "\r" | "//" | "/*") any

  chinese = letter | "，" | "（" | "）" | "“" | "”" | "：" | "." | "/" | ":"

  Template 
    = "[" #chinese+ "](" #chinese+ ")" -- quick
    | "{{" Expression PipeExpression? "}}" -- native


  Fountain 
    = "@" chinese+ Fountain_characterStatus -- character
    | Fountain_macro -- characterEscape // 角色行为
    | Fountain_macro -- characterStatus // 角色状态
    | "(" chinese+ ")" Fountain_callMacro ? -- macro

  Fountain_callMacro = CallCommand

  CallCommand = "[" Command PipeExpression? "]"

  PipeExpression = ~(IF | LET | FOREACH | WHILE | ELSE | ELSEIF | END)("|" (Expression | Command))

  Command = #key (Params)?

  Params 
    = Param (#",")? Params -- multiple
    | Param                   -- single

  Param = # key "=" Exp  -- setValue
    | key        -- setFlag
  key = (letter | number | "_")+
  
  LET
    = "|let" ListOf<LetStatement, ","> #statment_end
  LetStatement
    = Identifier "=" Exp  -- assign
    | Identifier         -- nonAssign
  IF
    = "|if" Exp
  END
    = "|end"
  ELSE
    = "|else"
  ELSEIF
    = "|elseif" Exp
  WHILE
    = "|while" Exp
  FOREACH
    = "|foreach" Identifier "in" ~(invalidIdentifier)(Identifier | Array | ArraySpread | ArrayItems)
    
  statment_end(请换行) = (" "|";")* ("\n"|"\r"|"\t"|end)

  Expression = CallExpression | Array | Identifier | value

  value = percet | string | number | boolean | "null"


  Array = "[" ArrayItems "]"
  ArraySpread = Exp "..." Exp

  ArrayItems = ListOf<Exp, ",">

  CallExpression = #key "(" ListOf<Exp, ","> ")"

  string = "\"" doubleQuoteStringContent* "\"" -- doubleQuote
      | "\'" singleQuoteStringContent* "\'" -- singleQuote
// ~("\'" | "\\" ) any  -- nonEscaped
  singleQuoteStringContent = ~("\'") any  -- nonEscaped
      | "\\" escapeCharacter                 -- escaped
  doubleQuoteStringContent = ~("\"") any  -- nonEscaped
      | "\\" escapeCharacter                 -- escaped
  singleEscapeCharacter = "'"|"\""|"\\"|"b"|"f"|"n"|"r"|"t"|"v"
  escapeCharacter = singleEscapeCharacter | "x" | "u"
  quote = "\"" | "\'"

  boolean = "true" | "false"

  number  (a number)
    = ("-"|"+") number   -- sign
    | digit* "." digit+  --  fract
    | "0x" hexdigit+        --  hex
    | digit+             --  whole
  hexdigit
    = "a".."f" | "A".."F" | digit
  percet = (number_sign | number_fract | number_whole) "%"

  Identifier = ~(number | boolean) ("$" | "%")? key
  invalidIdentifier(valid identifier) = ~(number | boolean) ("$" | "%")? (key " "+ key)
  

  Exp
    = JudgeExp booleanOperator Exp  -- bool
    | JudgeExp
  booleanOperator = "&&" | "||"
  JudgeExp
    = AddExp judgeOperator AddExp     -- judge
    | AddExp
  judgeOperator = "!=" | "==" | "??" | ">=" | "<=" | ">" | "<"
  // MathExp
  // = MathExp mathOperator MathExp  -- math
  // | PriExp
  // mathOperator = "+" | "-" | "*" | "/" | "^" | "%"
  AddExp
  = AddExp ("+" | "-") MulExp  -- add
  // | AddExp "-" MulExp  -- minus
  | MulExp
  MulExp
    = MulExp ("*" | "/" | "%") ExpExp  -- mul
    // | MulExp "/" ExpExp  -- divide
    // | MulExp "%" ExpExp  -- mod
    | ExpExp
  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp
  PriExp
  = "(" Exp ")"  -- paren
  | "+" PriExp   -- pos
  | "-" PriExp   -- neg
  | Expression
}
