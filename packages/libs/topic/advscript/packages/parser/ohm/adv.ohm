AdvScript {
  Scripts
    = LogicBlock*
  LogicBlock
    = Comment
    | logic_statment
    | IF LogicBlock* (ELSEIF LogicBlock*)* (ELSE LogicBlock*)? END  -- IF
    | WHILE LogicBlock* END  -- WHILE
    | FOREACH LogicBlock* END  -- FOREACH
    | LET                      -- LET
    | StoryLine                       -- Story
    
  Comment = comment_inline       -- notes
          | "//" comment_single     -- single
          | "/*" comment_multi "*/"       -- multi
  comment_single = (~("\n" | "\r") any)+
  comment_note = (~("\n" | "\r" | "]]") any)+
  comment_multi = (~("*/") any)+
  comment_inline = "[[" comment_note "]]"

  StoryLine
    = story_line  -- templateText
      | Fountain
      | #raw pipe_expr? -- plainText

  raw = plainLetter+

  story_line = ("~")? listOf<(raw | comment_inline | template), ""> pipe_expr? "\n"

  expr 
    = (~("}}")any)+ -- template 
    | (~("\n" | "|")any)* -- logic
    | (~(")")any)+ -- quick


  plainLetter 
    = ~("[" | "{{" | "|" | "\n" | "\r" | "//" | "/*") any

  chinese = letter | "，" | "（" | "）" | "“" | "”" | "：" | "." | "/" | ":"

  // template_quick = (~(")")any)+
  template
    = "[" (~("]" | "(")any)+ "](" expr_quick ")" -- quick
    | "{{" expr_template "}}" -- native

  Fountain 
    = fountain_character
    | "(" (~")"any)+ ")" callCommand? -- macro
    | Fountain_macro -- characterEscape
    | Fountain_macro -- characterStatus

  fountain
    = space* "@" space* (~"(" any)+ fountain_macro -- character
    | "(" (~")"any)+ ")" callCommand -- macro

  Fountain_callMacro = callCommand

  command = (~("]")any)+
  callCommand = "[" anwsome+ "]"


  CallCommand = "[" command "]"

  pipe_expr = ~(logic_statment | "|if" | "|elseif" | "|else" | "|end" | "|foreach" | "|while")("|" (~("\n")any)+)

  anwsome = "[" anwsome* "]" -- a
    | "(" anwsome* ")" -- b
    | (~("[" | "]" | "(" | ")" | "\n") any)+ -- c

  logic_statment
    = space* "|let " expr_logic ("\n") -- let
    // | space* "|if " expr_logic ("\n") -- if
    // | space* "|elseif " expr_logic ("\n") -- elseif
    // | space* "|else" space* "\n" -- else
    // | space* "|end " space* "\n" -- end
    | space* "\n" -- empty

  logic_exprs = ((~"\n")any)*

  LET
    = "|let" ListOf<LetAssignExpr, ",">
  
  AssignExpr = identifier "=" expression
  LetAssignExpr
    = AssignExpr  -- assign
    | identifier         -- nonAssign

  IF
    = "|if" expression
  END
    = "|end"
  ELSE
    = "|else"
  ELSEIF
    = "|elseif" expression
  WHILE
    = "|while" expression
  FOREACH
    = "|foreach" identifier "in" expression
    
  statment_end(请换行) = (" "|";")* ("\n"|"\r"|"\t"|end)
  key = ~(digit | "true" | "false") (letter | digit | "_")+
  identifier
   = ~(letter | "true" | "false") ("$" | "%")? key

  expression 
  = (~("[" | "]" | "|" | "{{" | "}}"| "\n" | "\r" | "//" | "/*") any)+

}
