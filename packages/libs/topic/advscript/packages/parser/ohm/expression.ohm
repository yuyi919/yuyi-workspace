Super {
  Main = literalOf<(null | boolean | number)>

  StatmentOf<T> = T*

  Optional<T> = T?
  optional<T> = T?
  stringify<T> = T

  End($END$) = end
  exprEnd($Exp$) = (";" | space)+

  null = "null"
  
  
  literalOf<T> = T

  boolean($boolean$) = "true" | "false"

  number($number$)
    = sign<hex>   -- sign
    | sign<number_fract> -- double
    | sign<number_whole> -- int
    | numberical* "." numberical+ -- fract
    | numberical+ -- whole

  hex($hexNumber$) = "0x" ("a".."f" | "A".."F" | numberical)+

  sign<T>($number$)
    = stringify<T> -- apply
    | ("-" | "+") stringify<T> -- signed

  numberical($numberical$) = "0".."9"

  internalEscape = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"

  escapable<T> = strictEscapable<T, T>
  strictEscapable<Escaped, NonEscaped> 
    = "\\" (internalEscape | "x" | "u" | Escaped)  -- escaped
    | ~NonEscaped any
}

Base <: Super {

  variableName($variableName$) = stringify<(variableNamePrefix?)> identifier
  variableNamePrefix($variableNamePrefix$) = "$" | "%"

  identifier = ~invalidIdentifier(validIdentifierPrefixChar ~invalidIdentifierChar (validIdentifierChar)*)
  invalidIdentifier($invalidIdentifier$) = boolean | number | null

  validIdentifierChar($validIdentifierChar$[:alnum: | "_" | "$"]) = alnum | "_" | "$"
  invalidIdentifierChar($invalidIdentifierChar$["#" | "@" | ...$spicalChar$]) = "#" | "@"
  validIdentifierPrefixChar($validIdentifierPrefixChar$) =  ~(variableNamePrefix)(letter | "_")

}

AdvScript <: Base {
  Main 
    := macroBegin Macro_Call optional<(Macro_Pipe | #pipeFlag)> (exprEnd | End) -- Macro
    | Template End -- Inline
    | Macro_Pipe (exprEnd | End) -- Pipe
    | #pipeFlag (exprEnd | End) -- AnonymousPipe
    | Exp (exprEnd | End) -- Exp
    | End

  macroBegin($macroBegin$) = "@"
  tmplBegin($tmplBegin$) = "{{"
  tmplEnd($tmplEnd$) = "}}"

  Template = tmplBegin Exp optional<(Macro_Pipe | #pipeFlag)> tmplEnd

  Macro_Call = (CallExpression | Macro_Call_Expr)
  Macro_Pipe
    = pipeFlag Macro_Call -- Call
    | pipeFlag pipeExprBegin Exp -- Expr

  pipeFlag($pipeFlag$) = "|"
  pipeExprBegin($pipeExprBegin$) = "="

  Macro_Call_Expr = #identifier optional<Params>

  Params 
    = Param #space Params -- multiple
    | Param  ";"*                      -- single

  Param = identifier "=" Exp    -- setValue
    | identifier                   -- setFlag
  
  Expression($Exp$)
  = CallExpression 
  | Array
  | literal
  | #variableName

  literal($literal$) = percet | literalOf<(string | number | boolean | null)> 

  Array($Array$)= "[" ArrayElements "]"
  ArraySpread($ArraySpread$) = SpreadExp_spread

  ArrayElements($ArrayElements$) = ListOf<TopExp, ",">

  CallExpression($CallExpression$) = #identifier "(" ListOf<TopExp, ","> ")"

  string
    = doubleQuote stringify<doubleQuoteStringContent*> doubleQuote -- doubleQuote
    | singleQuote stringify<singleQuoteStringContent*> singleQuote -- singleQuote
  doubleQuote($doubleQuote$) = "\""
  singleQuote($singleQuote$) = "'"

  singleQuoteStringContent = strictEscapable<escapeCharacter, "'">
  doubleQuoteStringContent = strictEscapable<escapeCharacter, "\"">
  
  escapeCharacter = internalEscape | "x" | "u" | ~(alnum|space)any

  
  percet = (number_double | number_int) "%" ~(literal | variableName)

  

  Exp
    = Exp "," Exp -- Comma
    | TopExp
    
  TopExp
    = SpreadExp_spread -- ArraySpread
    | #variableName "=" TopExp -- assign
    | BinaryExp

  CatchOrNullExp($CatchOrNullExp$) = ~BinaryExp_binary RelationExp
  CatchOrNullExp2($CatchOrNullExp$) = ~OrNullExp_or BinaryExp

  BinaryExp
    = BinaryExp ("&&" | "||") CatchOrNullExp2  -- binary
    | OrNullExp
    
  OrNullExp
    = OrNullExp "??" CatchOrNullExp  -- or
    | RelationExp

  RelationExp
    = RelationExp ("!=" | "==" | ">=" | "<=" | ">" | "<") RelationExp     -- relation
    | SpreadExp

  SpreadExp
    = SpreadExp "..." SpreadExp  -- spread
    | AddExp

  AddExp
    = AddExp operator_addition MulExp  -- add
    | MulExp

  operator_addition = "-" | "+"

  MulExp
    = MulExp ("%" | "/" | "*") ExpExp  -- mul
    | ExpExp

  ExpExp
    = ExpExp "^" PriExp  -- pow
    | IncrementExp
    | PriExp
    
  IncrementExp($Exp$) 
    = #variableName operator_increment -- after
    | operator_increment #variableName -- before

  operator_increment = "--" | "++"

  PriExp
  = PriExp_paren
  | Expression
  | operator_sign PriExp_paren   -- sign

  PriExp_paren($Exp$) = "(" Exp ")"
  operator_sign($Exp$) = (operator_addition | ("!"+))

}
