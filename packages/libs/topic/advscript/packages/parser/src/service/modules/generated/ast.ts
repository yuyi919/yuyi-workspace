/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode } from "langium";

export interface Character extends AstNode {
  readonly $container: CharacterDefine;
  name: AnyPlainText;
  params: Array<Param>;
}

export const Character = "Character";

export function isCharacter(item: unknown): item is Character {
  return reflection.isInstance(item, Character);
}

export interface Define extends AstNode {
  readonly $container: Model;
}

export const Define = "Define";

export function isDefine(item: unknown): item is Define {
  return reflection.isInstance(item, Define);
}

export interface Dialog extends AstNode {
  readonly $container: Model;
  dialogs: DialogContent;
  name: Reference<Character>;
}

export const Dialog = "Dialog";

export function isDialog(item: unknown): item is Dialog {
  return reflection.isInstance(item, Dialog);
}

export interface DialogContent extends AstNode {
  readonly $container: Dialog;
  contents: Array<Echo>;
}

export const DialogContent = "DialogContent";

export function isDialogContent(item: unknown): item is DialogContent {
  return reflection.isInstance(item, DialogContent);
}

export interface Echo extends AstNode {
  readonly $container: Model | DialogContent;
  text: Array<Template | Plain>;
}

export const Echo = "Echo";

export function isEcho(item: unknown): item is Echo {
  return reflection.isInstance(item, Echo);
}

export interface Hello extends AstNode {
  readonly $container: Model;
  person: Reference<Character>;
}

export const Hello = "Hello";

export function isHello(item: unknown): item is Hello {
  return reflection.isInstance(item, Hello);
}

export interface Literal extends AstNode {
  readonly $container: Param;
  value: string | AnyPlainText | number;
}

export const Literal = "Literal";

export function isLiteral(item: unknown): item is Literal {
  return reflection.isInstance(item, Literal);
}

export interface Model extends AstNode {
  contents: Array<Dialog | Echo>;
  defines: Array<Define>;
  hellos: Array<Hello>;
}

export const Model = "Model";

export function isModel(item: unknown): item is Model {
  return reflection.isInstance(item, Model);
}

export interface Param extends AstNode {
  readonly $container: Character;
  key: string;
  value: Literal;
}

export const Param = "Param";

export function isParam(item: unknown): item is Param {
  return reflection.isInstance(item, Param);
}

export interface Plain extends AstNode {
  readonly $container: Echo;
  content: PlainText;
}

export const Plain = "Plain";

export function isPlain(item: unknown): item is Plain {
  return reflection.isInstance(item, Plain);
}

export interface Template extends AstNode {
  readonly $container: Echo;
  name: Reference<Character>;
}

export const Template = "Template";

export function isTemplate(item: unknown): item is Template {
  return reflection.isInstance(item, Template);
}

export interface CharacterDefine extends Define {
  elements: Array<Character>;
  name: "Characters";
}

export const CharacterDefine = "CharacterDefine";

export function isCharacterDefine(item: unknown): item is CharacterDefine {
  return reflection.isInstance(item, CharacterDefine);
}

export interface OtherDefine extends Define {
  name: string;
  value: AnyPlainText;
}

export const OtherDefine = "OtherDefine";

export function isOtherDefine(item: unknown): item is OtherDefine {
  return reflection.isInstance(item, OtherDefine);
}

export type QualifiedName = string;

export type PlainText = string;

export type AnyPlainText = string;

export type AdvscriptAstType =
  | "Character"
  | "Define"
  | "Dialog"
  | "DialogContent"
  | "Echo"
  | "Hello"
  | "Literal"
  | "Model"
  | "Param"
  | "Plain"
  | "Template"
  | "CharacterDefine"
  | "OtherDefine";

export type AdvscriptAstReference = "Dialog:name" | "Hello:person" | "Template:name";

export class AdvscriptAstReflection implements AstReflection {
  getAllTypes(): string[] {
    return [
      "Character",
      "Define",
      "Dialog",
      "DialogContent",
      "Echo",
      "Hello",
      "Literal",
      "Model",
      "Param",
      "Plain",
      "Template",
      "CharacterDefine",
      "OtherDefine",
    ];
  }

  isInstance(node: unknown, type: string): boolean {
    return isAstNode(node) && this.isSubtype(node.$type, type);
  }

  isSubtype(subtype: string, supertype: string): boolean {
    if (subtype === supertype) {
      return true;
    }
    switch (subtype) {
      case CharacterDefine:
      case OtherDefine: {
        return this.isSubtype(Define, supertype);
      }
      default: {
        return false;
      }
    }
  }

  getReferenceType(referenceId: AdvscriptAstReference): string {
    switch (referenceId) {
      case "Dialog:name": {
        return Character;
      }
      case "Hello:person": {
        return Character;
      }
      case "Template:name": {
        return Character;
      }
      default: {
        throw new Error(`${referenceId} is not a valid reference id.`);
      }
    }
  }
}

export const reflection = new AdvscriptAstReflection();
