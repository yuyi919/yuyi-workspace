import {
  AstNode,
  createDefaultModule,
  DefaultJsonSerializer,
  DefaultModuleContext,
  inject,
  LangiumServices,
  Module,
  PartialLangiumServices,
} from "langium";
import {
  AdvscriptScopeProvider,
  AstNodeDescriptionProvider,
  AdvscriptModelNameProvider,
  HoverProvider,
  Linker,
} from "./advscript-provider";
import { AdvscriptValidationRegistry, AdvscriptValidator } from "./advscript-validator";
import { ScopeComputation } from "./domain-model-scope";
// import { OhmParser } from "./custom";
import { AdvscriptGeneratedModule } from "./generated/module";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type AdvscriptAddedServices = {
  validation: {
    AdvscriptValidator: AdvscriptValidator;
  };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type AdvscriptServices = LangiumServices & AdvscriptAddedServices;

class A extends DefaultJsonSerializer {
  serialize(node: AstNode, space?: string | number): string {
    try {
      return super.serialize(node, space);
    } catch (error) {
      return "<node:" + node.$type + ">";
    }
  }
}
/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const AdvscriptModule: Module<
  AdvscriptServices,
  PartialLangiumServices & AdvscriptAddedServices
> = {
  validation: {
    ValidationRegistry: (injector) => new AdvscriptValidationRegistry(injector),
    AdvscriptValidator: () => new AdvscriptValidator(),
  },
  references: {
    Linker: (injector) => new Linker(injector),
    ScopeComputation: (injector) => new ScopeComputation(injector),
    NameProvider: (injector) => new AdvscriptModelNameProvider(injector),
    ScopeProvider: (i) => new AdvscriptScopeProvider(i),
  },
  index: {
    AstNodeDescriptionProvider: (injector) => new AstNodeDescriptionProvider(injector),
  },
  serializer: {
    JsonSerializer: (i) => new A(i),
  },
  // parser: {
  //     LangiumParser: (service) => new OhmParser(service) as any,
  // },
  parser: {
    ParserConfig: () => ({
      skipValidations: true,
    }),
  },
  lsp: {
    HoverProvider: (service) => new HoverProvider(service),
  },
};
/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function createAdvscriptServices(context?: DefaultModuleContext): AdvscriptServices {
  return inject(createDefaultModule(context), AdvscriptGeneratedModule, AdvscriptModule);
}
