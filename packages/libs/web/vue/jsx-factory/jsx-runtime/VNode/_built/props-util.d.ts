import { VNode } from "vue";
declare const camelize: (str: string) => string;
declare const parseStyleText: (cssText?: string, camel?: boolean) => {};
declare const hasProp: (instance: any, prop: any) => boolean;
declare const slotHasProp: (slot: any, prop: any) => boolean;
declare const filterProps: (props: any, propsData?: {}) => {};
declare const getSlots: (ele: any) => any;
declare const getSlot: (self: any, name?: string, options?: {}) => any;
declare const getAllChildren: (ele: any) => any;
declare const getSlotOptions: (ele: any) => any;
declare const getOptionProps: <P>(instance: VNode) => P;
declare const getComponentFromProp: (instance: any, prop: any, options?: any, execute?: boolean) => any;
declare const getAllProps: (ele: any) => any;
declare const getPropsData: (ele: any) => any;
declare const getValueByProp: (ele: any, prop: any) => any;
declare const getAttrs: (ele: any) => any;
declare const getKey: (ele: VNode) => string;
export declare function getEvents(child: any): {};
export declare function getDataEvents(child: any): {};
export declare function getListeners(context: any): any;
export declare function getClass(ele: any): {};
export declare function getStyle(ele: any, camel: any): any;
export declare function getComponentName(opts: any): any;
export declare function isEmptyElement(c: any): boolean;
export declare function isStringElement(c: any): boolean;
export declare function filterEmpty(children?: any[]): any[];
declare const initDefaultProps: (propTypes: any, defaultProps: any) => any;
export declare function mergeProps(): {};
declare function isValidElement(element: any): boolean;
export { hasProp, filterProps, getOptionProps, getComponentFromProp, getSlotOptions, slotHasProp, getPropsData, getKey, getAttrs, getValueByProp, parseStyleText, initDefaultProps, isValidElement, camelize, getSlots, getSlot, getAllProps, getAllChildren, };
export default hasProp;
//# sourceMappingURL=props-util.d.ts.map